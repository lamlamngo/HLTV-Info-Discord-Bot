import HLTVConfig from './models/HLTVConfig';
export declare class HLTVFactory {
    private readonly config;
    constructor(config: HLTVConfig);
    connectToScorebot: ({ id, onScoreboardUpdate, onLogUpdate, onConnect, onDisconnect }: import("endpoints/connectToScorebot").ConnectToScorebotParams) => Promise<void>;
    getMatch: ({ id }: {
        id: number;
    }) => Promise<import("models/FullMatch").default>;
    getMatches: () => Promise<(import("models/UpcomingMatch").default | import("models/LiveMatch").default)[]>;
    getMatchesStats: ({ startDate, endDate, matchType, maps }?: import("endpoints/getMatchesStats").GetMatchesStatsParams) => Promise<import("models/MatchStats").default[]>;
    getMatchMapStats: ({ id }: {
        id: number;
    }) => Promise<import("models/FullMatchMapStats").default>;
    getRecentThreads: () => Promise<import("models/Thread").default[]>;
    getResults: ({ pages }?: {
        pages?: number | undefined;
    }) => Promise<import("models/MatchResult").default[]>;
    getStreams: ({ loadLinks }?: {
        loadLinks?: boolean | undefined;
    }) => Promise<import("models/FullStream").default[]>;
    getTeamRanking: ({ year, month, day, country }?: {
        year?: string | undefined;
        month?: string | undefined;
        day?: string | undefined;
        country?: string | undefined;
    }) => Promise<import("models/TeamRanking").default[]>;
    getTeam: ({ id }: {
        id: number;
    }) => Promise<import("models/FullTeam").default>;
    getTeamStats: ({ id }: {
        id: number;
    }) => Promise<import("models/FullTeamStats").default>;
    getPlayer: ({ id }: {
        id: number;
    }) => Promise<import("models/FullPlayer").default>;
    getEvent: ({ id }: {
        id: number;
    }) => Promise<import("models/FullEvent").default>;
    createInstance(config: HLTVConfig): HLTVFactory;
}
declare const hltvInstance: HLTVFactory;
export default hltvInstance;
export { hltvInstance as HLTV };
